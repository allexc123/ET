// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  public partial class Login : pb::IMessage {
    private static readonly pb::MessageParser<Login> _parser = new pb::MessageParser<Login>(() => (Login)MessagePool.Instance.Fetch(typeof(Login)));
    public static pb::MessageParser<Login> Parser { get { return _parser; } }

    private string driveId_ = "";
    public string DriveId {
      get { return driveId_; }
      set {
        driveId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DriveId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DriveId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (DriveId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DriveId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      driveId_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DriveId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class LoginResult : pb::IMessage {
    private static readonly pb::MessageParser<LoginResult> _parser = new pb::MessageParser<LoginResult>(() => (LoginResult)MessagePool.Instance.Fetch(typeof(LoginResult)));
    public static pb::MessageParser<LoginResult> Parser { get { return _parser; } }

    private long playerId_;
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_bigs_codec
        = pb::FieldCodec.ForString(18);
    private pbc::RepeatedField<string> bigs_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Bigs {
      get { return bigs_; }
      set { bigs_ = value; }
    }

    private static readonly pb::FieldCodec<string> _repeated_middles_codec
        = pb::FieldCodec.ForString(26);
    private pbc::RepeatedField<string> middles_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Middles {
      get { return middles_; }
      set { middles_ = value; }
    }

    private static readonly pb::FieldCodec<string> _repeated_smalls_codec
        = pb::FieldCodec.ForString(34);
    private pbc::RepeatedField<string> smalls_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Smalls {
      get { return smalls_; }
      set { smalls_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      bigs_.WriteTo(output, _repeated_bigs_codec);
      middles_.WriteTo(output, _repeated_middles_codec);
      smalls_.WriteTo(output, _repeated_smalls_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      size += bigs_.CalculateSize(_repeated_bigs_codec);
      size += middles_.CalculateSize(_repeated_middles_codec);
      size += smalls_.CalculateSize(_repeated_smalls_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerId_ = 0;
      bigs_.Clear();
      middles_.Clear();
      smalls_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            bigs_.AddEntriesFrom(input, _repeated_bigs_codec);
            break;
          }
          case 26: {
            middles_.AddEntriesFrom(input, _repeated_middles_codec);
            break;
          }
          case 34: {
            smalls_.AddEntriesFrom(input, _repeated_smalls_codec);
            break;
          }
        }
      }
    }

  }

  public partial class HeartbeatMsg : pb::IMessage {
    private static readonly pb::MessageParser<HeartbeatMsg> _parser = new pb::MessageParser<HeartbeatMsg>(() => (HeartbeatMsg)MessagePool.Instance.Fetch(typeof(HeartbeatMsg)));
    public static pb::MessageParser<HeartbeatMsg> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public partial class HeartbeatResultMsg : pb::IMessage {
    private static readonly pb::MessageParser<HeartbeatResultMsg> _parser = new pb::MessageParser<HeartbeatResultMsg>(() => (HeartbeatResultMsg)MessagePool.Instance.Fetch(typeof(HeartbeatResultMsg)));
    public static pb::MessageParser<HeartbeatResultMsg> Parser { get { return _parser; } }

    private long serverTime_;
    public long ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ServerTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ServerTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTime);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      serverTime_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
