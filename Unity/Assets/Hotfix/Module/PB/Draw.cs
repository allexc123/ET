// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Draw.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  public partial class DrawMsg : pb::IMessage {
    private static readonly pb::MessageParser<DrawMsg> _parser = new pb::MessageParser<DrawMsg>(() => (DrawMsg)MessagePool.Instance.Fetch(typeof(DrawMsg)));
    public static pb::MessageParser<DrawMsg> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public partial class DrawResultMsg : pb::IMessage {
    private static readonly pb::MessageParser<DrawResultMsg> _parser = new pb::MessageParser<DrawResultMsg>(() => (DrawResultMsg)MessagePool.Instance.Fetch(typeof(DrawResultMsg)));
    public static pb::MessageParser<DrawResultMsg> Parser { get { return _parser; } }

    private int bigIndxe_;
    public int BigIndxe {
      get { return bigIndxe_; }
      set {
        bigIndxe_ = value;
      }
    }

    private int middleIndex_;
    public int MiddleIndex {
      get { return middleIndex_; }
      set {
        middleIndex_ = value;
      }
    }

    private int smallIndex_;
    public int SmallIndex {
      get { return smallIndex_; }
      set {
        smallIndex_ = value;
      }
    }

    private string rewardIcon_ = "";
    public string RewardIcon {
      get { return rewardIcon_; }
      set {
        rewardIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BigIndxe != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BigIndxe);
      }
      if (MiddleIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MiddleIndex);
      }
      if (SmallIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SmallIndex);
      }
      if (RewardIcon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RewardIcon);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BigIndxe != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BigIndxe);
      }
      if (MiddleIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MiddleIndex);
      }
      if (SmallIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmallIndex);
      }
      if (RewardIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RewardIcon);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      bigIndxe_ = 0;
      middleIndex_ = 0;
      smallIndex_ = 0;
      rewardIcon_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BigIndxe = input.ReadInt32();
            break;
          }
          case 16: {
            MiddleIndex = input.ReadInt32();
            break;
          }
          case 24: {
            SmallIndex = input.ReadInt32();
            break;
          }
          case 34: {
            RewardIcon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class RewardMsg : pb::IMessage {
    private static readonly pb::MessageParser<RewardMsg> _parser = new pb::MessageParser<RewardMsg>(() => (RewardMsg)MessagePool.Instance.Fetch(typeof(RewardMsg)));
    public static pb::MessageParser<RewardMsg> Parser { get { return _parser; } }

    private string phoneNumber_ = "";
    public string PhoneNumber {
      get { return phoneNumber_; }
      set {
        phoneNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PhoneNumber.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PhoneNumber);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PhoneNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PhoneNumber);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      phoneNumber_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PhoneNumber = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
